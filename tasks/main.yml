---
- name: Debug kube init
  debug:
    msg: 'kubeadm init --pod-network-cidr={{ kubernetes_pod_network.cidr }} --apiserver-advertise-address={{ kubernetes_server_advertise_address | default("0.0.0.0") }} --ignore-preflight-errors={{ kubernetes_ignore_preflight_errors }} --upload-certs --control-plane-endpoint={{ kubernetes_control_plane_endpoint }} {{ "--apiserver-cert-extra-sans="+apiserver_cert_extra_sans if apiserver_cert_extra_sans is defined }} | grep certificate-key | grep control-plane | sed "s/.*certificate-key//" | sed "s/ //g"|sed "s/\\\//g"'

  when: 
    - primarymanager is defined


- name: Initialize Kubernetes master with kubeadm init.
  shell: 'kubeadm init --pod-network-cidr={{ kubernetes_pod_network.cidr }} --apiserver-advertise-address={{ kubernetes_server_advertise_address | default("0.0.0.0") }} --ignore-preflight-errors={{ kubernetes_ignore_preflight_errors }} --upload-certs --control-plane-endpoint={{ kubernetes_control_plane_endpoint }} {{ "--apiserver-cert-extra-sans="+apiserver_cert_extra_sans if apiserver_cert_extra_sans is defined }} | grep certificate-key | grep control-plane | sed "s/.*certificate-key//" | sed "s/ //g"|sed "s/\\\//g"'
  register: kubernetes_manager0init_command_result
  changed_when: false
  when:
    - primarymanager is defined

- name: Debug token
  debug:
    msg: "{{kubernetes_manager0init_command_result.stdout}}"

  when: 
    - primarymanager is defined and kubernetes_manager0init_command_result.stdout is defined

- name: Create .kube folder
  file:
    path: "~{{ ansible_ssh_user }}/.kube"
    state: directory
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
  when: 
    - primarymanager is defined and kubernetes_manager0init_command_result.stdout is defined

- name: Copy admin.conf to .kube folder
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "~{{ ansible_ssh_user }}/.kube/config"
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    remote_src: yes
  when: 
    - primarymanager is defined

- name: "Add K8S Manager Token and Hash to dummy host"
  add_host:
    name: "K8S_MANAGERKEY_HOLDER"
    token: "{{ kubernetes_manager0init_command_result.stdout }}"
    hash:
  when: 
    - kubernetes_manager0init_command_result.stdout is defined
  changed_when: false

# Set up nodes.
- name: Get the kubeadm join command from the Kubernetes master.
  command: kubeadm token create --print-join-command
  changed_when: false
  register: kubernetes_join_command_result
  when: 
    - primarymanager is defined

- name: "Add K8S Token and Hash to dummy host"
  add_host:
    name: "K8S_TOKEN_HOLDER"
    token: "{{ kubernetes_join_command_result.stdout }}"
    hash:
  when: kubernetes_join_command_result.stdout is defined
  changed_when: false

- name: Debug secondary
  debug: 
    msg: "Joining with {{ hostvars['K8S_TOKEN_HOLDER']['token'] }}"
  when: secondarymaster is defined

- name: Join node to Kubernetes as master
  shell: >
    {{ hostvars['K8S_TOKEN_HOLDER']['token'] }} --apiserver-advertise-address={{ kubernetes_node_ip | default("0.0.0.0") }} --control-plane --certificate-key {{ hostvars['K8S_MANAGERKEY_HOLDER']['token'] }} creates=/etc/kubernetes/kubelet.conf
  tags: ["skip_ansible_lint"]
  when: secondarymaster is defined

- name: Join node to Kubernetes as worker
  shell: >
    {{ hostvars['K8S_TOKEN_HOLDER']['token'] }}
    creates=/etc/kubernetes/kubelet.conf
  tags: ["skip_ansible_lint"]
  when: kubernetes_role != 'manager'

- name: Create .kube folder
  file:
    path: "~{{ ansible_ssh_user }}/.kube"
    state: directory
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
  when: secondarymaster is defined

- name: Copy admin.conf to .kube folder
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "~{{ ansible_ssh_user }}/.kube/config"
    owner: "{{ ansible_ssh_user }}"
    group: "{{ ansible_ssh_user }}"
    remote_src: yes
  when: secondarymaster is defined

- name: Configure Calico networking.
  command: "{{ item }}"
  with_items:
    - kubectl apply -f {{ kubernetes_calico_manifest_file }}
  register: calico_result
  # changed_when: "'created' in calico_result.stdout"
  changed_when: false
  when:
    - kubernetes_pod_network.cni == 'calico'
    - primarymanager is defined
    - kubernetes_calico_manifest_file is defined

- name: Configure Calico networking.
  command: kubectl -n kube-system set env daemonset/calico-node FELIX_IGNORELOOSERPF=true
  when:
    - kubernetes_pod_network.cni == 'calico'
    - primarymanager is defined
    - kubernetes_calico_manifest_file is defined
  changed_when: false

- name: Check if Kubernetes Dashboard UI service already exists.
  shell: kubectl get services --namespace kube-system | grep -q kubernetes-dashboard
  changed_when: false
  failed_when: false
  register: kubernetes_dashboard_service
  when: kubernetes_enable_web_ui is defined

- name: Enable the Kubernetes Web Dashboard UI (if configured).
  command: "kubectl create -f {{ kubernetes_web_ui_manifest_file }}"
  when:
    - kubernetes_enable_web_ui is defined
    - kubernetes_dashboard_service is failed

- name: Configure kubectl proxy
  shell: "kubectl get configmap kube-proxy -n kube-system -o yaml | sed -e 's/strictARP: false/strictARP: true/' | kubectl apply -f - -n kube-system"
  when: primarymanager is defined
  args:
    executable: /bin/bash


# TODO: Check if taint exists with something like `kubectl describe nodes`
# instead of using kubernetes_init_stat.stat.exists check.
- name: Allow pods on master node (if configured).
  command: "kubectl taint nodes --all node-role.kubernetes.io/master-"
  when:
    - kubernetes_allow_pods_on_master is defined
    - primarymanager is defined
  ignore_errors: True
  changed_when: false



- name: Install MetalLb.
  command: "{{ item }}"
  with_items:
    - kubectl apply -f https://raw.githubusercontent.com/google/metallb/v0.11.0/manifests/namespace.yaml
    - kubectl apply -f https://raw.githubusercontent.com/google/metallb/v0.11.0/manifests/metallb.yaml
  register: mllbcreate
  changed_when: false
  when: 
    - primarymanager is defined
    - metallbpools is defined

- name: Configure MetalLb memberlist.
  shell: 'kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"'
  ignore_errors: yes
  changed_when: false
  when: 
    - primarymanager is defined
    - metallbpools is defined

- name: Setup k8s MetalLb
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: config
        namespace: metallb-system
      data:
        config: "{{ metallbpools }}"
  when: 
    - primarymanager is defined
    - metallbpools is defined

- name: Wait for my-app-name pods to be ready.
  command: |
    kubectl wait --for=condition=Ready no --all --timeout=300s
  changed_when: false
  when: primarymanager is defined